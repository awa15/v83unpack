&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	лОбъект = РеквизитФормыВЗначение("Объект");
	ПутьКПлатформе1с83 = лОбъект.ПолучитьПутьПлатформы1С_83();
	ВерсияПлатформыДляБазы = "8.3";
КонецПроцедуры

&НаКлиенте
Функция ОбработатьПараметрыЗапуска()
	Перем лЗавершитьРаботуПосле, ПутьКФайлуЛога;
	лЗавершитьРаботуПосле = Ложь;
	ПутьКФайлуЛога = "";
	
	параметрыЗапуска = ПолучитьМассивПараметровЗапуска();
	Если ЗначениеЗаполнено(параметрыЗапуска) Тогда
		
		Для Номер = 0 По параметрыЗапуска.Количество()-1 Цикл
			ЭлементМассива = параметрыЗапуска.Получить(Номер);
			
			лКомандаЗапуска = НРег(ЭлементМассива);
			
			Если ВРег(лКомандаЗапуска) = ВРег("auto") Тогда
				лЗавершитьРаботуПосле = Истина;
				Прервать;
			КонецЕсли;
			
			Если (НРег(лКомандаЗапуска) = Нрег("out") ИЛИ НРег(лКомандаЗапуска) = Нрег("Тесты_Путь_КЛогам"))
				И ПараметрыЗапуска.Количество() > Номер Тогда
				
				ПутьКФайлуЛога = параметрыЗапуска[Номер+1];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
		Попытка
			Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
			Запись.ЗаписатьСтроку("1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.
			Запись.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ПриОткрытииНаСервере(ПараметрЗапуска);
	Исключение
		текстОшибки = ОписаниеОшибки();
		Сообщить("ОШИБКА загрузки тестов: "+текстОшибки);
		
		Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
			Попытка
				Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
				Запись.ЗаписатьСтроку("1");
				Запись.ЗаписатьСтроку(текстОшибки);//По умолчанию считаем что ошибка. Перед завершением работы запишем 0.
				Запись.Закрыть();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		
		Если лЗавершитьРаботуПосле Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Ложь;
		КонецЕсли;
		
	КонецПопытки;
	

	Если лЗавершитьРаботуПосле Тогда
		Если НЕ ПустаяСтрока(ПутьКФайлуЛога) Тогда
			Попытка
				Запись = Новый ЗаписьТекста(ПутьКФайлуЛога);
				Запись.ЗаписатьСтроку("0"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0.
				Запись.Закрыть();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции



&НаКлиенте
Функция ПолучитьМассивПараметровЗапуска()

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
		//ПервыйПараметр = Врег(ПараметрыЗапуска[0]);
	
		//Отказ = ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска(
		//	ПервыйПараметр, ПараметрыЗапуска) Или Отказ;
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		ОбработатьПараметрыЗапуска();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере(ПараметрЗапуска)
	лОбъект = РеквизитФормыВЗначение("Объект");
	лОбъект.ОбработатьПараметрыЗапуска(ПараметрЗапуска);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДанныеБазы_1C2Git(Команда)
	ЗаполнитьДанныеБазы_1C2GitНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБазы_1C2GitНаСервере()
	лПараметры = Новый Структура;
		//лПараметры.Вставить("ПутьКФайлуХранилища1С", _ПолучитьПутьКВременномуФайлуХранилища1С());
	лПараметры.Вставить("ПутьКХранилищу1C", "tcp://ws-msk-a2354:3542/1C2Git");
	//лПараметры.Вставить("НомерВерсииХранилища", НомерВерсииХранилища);
	
	лПараметры.Вставить("Пользователь", "");
	лПараметры.Вставить("Пароль", "");
	лПараметры.Вставить("ПользовательХранилища", "Отладка");
	лПараметры.Вставить("ПарольХранилища", "1");
	
	лПараметры.Вставить("ПутьКБазе", "File=""W:\Конфигурации\Связной\1C2Git_Отладка""");
	лПараметры.Вставить("КаталогВыгрузки", "T:\Programming\svz_tfs\source\builds\1C2Git\Конфигурация");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, лПараметры);
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект, лПараметры);
КонецПроцедуры

&НаКлиенте
Процедура РазобратьКонфигурацию(Команда)
	РазобратьКонфигурациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазобратьКонфигурациюНаСервере()
	РеквизитФормыВЗначение("Объект").РазобратьФайлКонфигурации(ПутьКФайлуКонфигурации, КаталогВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонфигурациюПоНомеруВерсииХранилища1С(Команда)
	ПолучитьКонфигурациюПоНомеруВерсииХранилища1СНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьКонфигурациюПоНомеруВерсииХранилища1СНаСервере()
	//П = СоздатьПараметры();
	
	ПутьКФайлуХранилища1С = "";  // TODO подставить нормальный путь
	
	резПутьКФайлуКонфигурации = "";
	успешно = РеквизитФормыВЗначение("Объект").ПоНомеруВерсииСохранитьКонфигурациюИзХранилища1С(ПутьКБазе, Пользователь, Пароль, ПутьКХранилищу1C, 
		ПользовательХранилища, ПарольХранилища, ПутьКФайлуХранилища1С, НомерВерсииХранилища, резПутьКФайлуКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура РазобратьКонфигурациюПоНомеруВерсииХранилища1С(Команда)
	РазобратьКонфигурациюПоНомеруВерсииХранилища1СНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазобратьКонфигурациюПоНомеруВерсииХранилища1СНаСервере()
	//П = СоздатьПараметры();
	ПутьКФайлуХранилища1С = "";  // TODO подставить нормальный путь
	
	КаталогВыгрузкиВсехМодулей83 = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВыгрузкиВсехМодулей83);
	
	резПутьКФайлуКонфигурации = "";
	успешно = РеквизитФормыВЗначение("Объект").ПоНомеруВерсииРазобратьКонфигурациюИзХранилища1С(ПутьКБазе, Пользователь, Пароль, ПутьКХранилищу1C, 
		ПользовательХранилища, ПарольХранилища, ПутьКФайлуХранилища1С, НомерВерсииХранилища, КаталогВыгрузкиВсехМодулей83, КаталогВыгрузки, 
		резПутьКФайлуКонфигурации);
КонецПроцедуры

Функция СоздатьПараметры()
	лПараметры = Новый Структура;
		//лПараметры.Вставить("ПутьКФайлуХранилища1С", _ПолучитьПутьКВременномуФайлуХранилища1С());
	лПараметры.Вставить("ПутьКХранилищу1C", ПутьКХранилищу1C);
	лПараметры.Вставить("НомерВерсииХранилища", НомерВерсииХранилища);
	
	лПараметры.Вставить("Пользователь", Пользователь);
	лПараметры.Вставить("Пароль", Пароль);
	лПараметры.Вставить("ПользовательХранилища", ПользовательХранилища);
	лПараметры.Вставить("ПарольХранилища", ПарольХранилища);
	
	лПараметры.Вставить("ПутьКБазе", ПутьКБазе);
	лПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	
	Возврат лПараметры;
КонецФункции
 
&НаКлиенте
Функция ДиалогВыбораКаталогаИФайла(РежимДиалога =  Неопределено, Значение =  "") 
	
	Если РежимДиалога = Неопределено Тогда
		РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога;
	КонецЕсли;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораКаталога.Каталог = Значение;
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
			Значение = ДиалогВыбораКаталога.Каталог;
		Иначе
			Значение = ДиалогВыбораКаталога.ПолноеИмяФайла;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ДиалогВыбораКаталогаИФайла(РежимДиалогаВыбораФайла.ВыборКаталога, Элемент.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ДиалогВыбораКаталогаИФайла(РежимДиалогаВыбораФайла.ВыборКаталога, Элемент.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ДиалогВыбораКаталогаИФайла(РежимДиалогаВыбораФайла.ВыборКаталога, Элемент.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуДляВыгрузки1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ ДиалогВыбораКаталогаИФайла(РежимДиалогаВыбораФайла.ВыборКаталога, Элемент.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СобратьКонфигурацию(Команда)
	СобратьКонфигурациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура СобратьКонфигурациюНаСервере()
	РеквизитФормыВЗначение("Объект").СобратьФайлКонфигурации(ПутьКФайлуКонфигурации, КаталогВыгрузки);

КонецПроцедуры
